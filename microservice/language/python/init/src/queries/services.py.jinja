from dependency_injector.wiring import (
    Provide,
)

from src.queries.repository import (
    {{ aggregate }}QueryServiceRepository,
)

from minos.aggregate import (
    Event,
)
from minos.cqrs import (
    QueryService,
)
from minos.networks import (
    Request,
    Response,
    ResponseException,
    enroute,
)


class {{ aggregate }}QueryService(QueryService):
    """{{ aggregate }}QueryService class."""

    repository: {{ aggregate }}QueryServiceRepository = Provide["{{ name }}_repository"]

    @enroute.rest.query("/{{ aggregate.lower() }}s", "GET")
    async def get_{{ aggregate.lower() }}(self, request: Request) -> Response:
        """Get a {{ aggregate }} instance.

        :param request: A request instance..
        :return: A response exception.
        """
        raise ResponseException("Not implemented yet!")

    @enroute.broker.event("{{ aggregate }}Created")
    async def {{ aggregate.lower() }}_created(self, request: Request) -> None:
        """Handle the {{ aggregate }} creation events.

        :param request: A request instance containing the aggregate difference.
        :return: This method does not return anything.
        """
        event: Event = await request.content()
        print(event)

    @enroute.broker.event("{{ aggregate }}Updated")
    async def {{ aggregate.lower() }}_updated(self, request: Request) -> None:
        """Handle the {{ aggregate }} update events.

        :param request: A request instance containing the aggregate difference.
        :return: This method does not return anything.
        """
        event: Event = await request.content()
        print(event)

    @enroute.broker.event("{{ aggregate }}Deleted")
    async def {{ aggregate.lower() }}_deleted(self, request: Request) -> None:
        """Handle the {{ aggregate }} deletion events.

        :param request: A request instance containing the aggregate difference.
        :return: This method does not return anything.
        """
        event: Event = await request.content()
        print(event)
